<?php

namespace Drupal\module_checker\Form;

use Drupal\Core\Entity\ContentEntityForm;
use Drupal\Core\Form\FormStateInterface;
use Symfony\Component\DependencyInjection\ContainerInterface;

/**
 * Form controller for Module info edit forms.
 *
 * @ingroup module_checker
 */
class ModuleInfoForm extends ContentEntityForm {

  /**
   * The current user account.
   *
   * @var \Drupal\Core\Session\AccountProxyInterface
   */
  protected $account;

  /**
   * {@inheritdoc}
   */
  public static function create(ContainerInterface $container) {
    // Instantiates this form class.
    $instance = parent::create($container);
    $instance->account = $container->get('current_user');
    return $instance;
  }

  /**
   * {@inheritdoc}
   */
  public function buildForm(array $form, FormStateInterface $form_state) {
    /** @var \Drupal\module_checker\Entity\ModuleInfo $entity */
    $form = parent::buildForm($form, $form_state);

    $entity = $this->entity;
    $form['machine_name']['#disabled'] = !$entity->isNew();
    $form['machine_name']['#access'] = !$entity->isNew();

    return $form;
  }

  /**
   * {@inheritdoc}
   */
  public function validateForm(array &$form, FormStateInterface $form_state) {
    // $form_state->setValue('machine_name', 'devel');
    $entity = parent::validateForm($form, $form_state);
    if ($entity->label()) {
      $module_name = $entity->label();
      /** @var \Drupal\module_checker\ModuleChecker $moduleCheckerService */
      $moduleCheckerService = \Drupal::service('module_checker.service');
      $module_exists = $moduleCheckerService->moduleExists($module_name);
      if ($module_exists) {
        if ($entity->isNew() || $entity->id() != $module_exists->id()) {
          $form_state->setErrorByName('name', $this->t('Module info entity for "@module" module already exists!',
            ['@module' => $module_name]));
        }
      }

      if (!$moduleCheckerService->getModulePageHtml($module_name)) {
        $form_state->setErrorByName('name', $this->t('Drupal module page for "@module" is unavailable!',
          ['@module' => $module_name]));
      }
    }

  }

  /**
   * {@inheritdoc}
   */
  public function submitForm(array &$form, FormStateInterface $form_state) {
    // @todo Change the autogenerated stub
    parent::submitForm($form, $form_state);

    // Set machine name field value.
    /** @var \Drupal\module_checker\ModuleChecker $moduleCheckerService */
    $moduleCheckerService = \Drupal::service('module_checker.service');
    $machine_name = $moduleCheckerService->getMachineName($this->entity->label());
    $this->entity->set('machine_name', $machine_name);
    $form_state->setValue('machine_name', $machine_name);
  }

  /**
   * {@inheritdoc}
   */
  public function save(array $form, FormStateInterface $form_state) {
    $entity = $this->entity;

    $status = parent::save($form, $form_state);

    switch ($status) {
      case SAVED_NEW:
        $this->messenger()->addMessage($this->t('Created the %label Module info.', [
          '%label' => $entity->label(),
        ]));
        break;

      default:
        $this->messenger()->addMessage($this->t('Saved the %label Module info.', [
          '%label' => $entity->label(),
        ]));
    }
    $form_state->setRedirect('entity.module_info.collection');
  }

}

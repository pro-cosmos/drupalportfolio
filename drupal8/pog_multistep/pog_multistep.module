<?php

use Drupal\Core\Entity\Entity\EntityFormMode;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Url;
use Drupal\Core\Link;
use Drupal\pog_multistep\Utility\EntityFormModeHelper;


/**
 * Constants.
 */
define('POG_MULTISTEP_FORM_STEP_1', 'base_data');
define('POG_MULTISTEP_FORM_STEP_3', 'distribution_channels');
define('POG_MULTISTEP_FORM_STEP_4', 'markets');
define('POG_MULTISTEP_FORM_STEP_5', 'distribution_market');
define('POG_MULTISTEP_FORM_STEP_6', 'salary');
define('POG_MULTISTEP_FORM_STEP_7', 'info_sharing');

define('POG_MULTISTEP_WEICHE_1B', 'WEICHE_1B');
define('POG_MULTISTEP_WEICHE_2B', 'WEICHE_2B');
define('POG_MULTISTEP_WEICHE_3B', 'WEICHE_3B');
define('POG_MULTISTEP_WEICHE_4B', 'WEICHE_4B');

define('POG_MULTISTEP_TAB_CLEAR', 0);
define('POG_MULTISTEP_TAB_CHANGED', 1);
define('POG_MULTISTEP_TAB_VALIDATED', 2);


/**
 * Define custom required fields.
 */
define('POG_MULTISTEP_REQUIRED_FIELDS', serialize([
    'field_pog_3_8int',
    'field_pog_repeated_conflicts',
    'field_pog_learning_whatdoc2',
    'field_pog_doc_lastja',
    'field_pog_person_name',
    'field_pog_distribution_other',
    'field_pog_activities_other',
    'field_pog_learning_whatdoc1',
    'field_pog_learning_ja_other',
    'field_pog_training_other',
    'field_pog_countries_eu',
    'field_pog_kooper332_2ja',
    'field_pog_kooper332_6ja',
    'field_pog_kooper332_4a',
    'field_pog_tariff_3ja',
    'field_pog_tarif_2ja',
    'field_pog_meeting_ja',
    'field_pog_monitoring3_8_other',
    'field_pog_mistake3_8_',
    'field_pog_monitoring_otherja',
    'field_pog_table38_otherja',
    'field_pog_emp_pr',
    'field_pog_coflicts_3_8',
    'field_pog_allgemein3_1',
    'field_pog_beratung_3a',
    'field_pog_other3_4_5ja',
    'field_pog_empoyees_get_sont',
    'field_pog_prof',
    'field_pog_money',
    'field_pog_family',
    'field_pog_age',
    'field_pog_firma',
    'field_pog_investment_account_oth',
    'field_pog_inf_from_manuf6',
    'field_pog_adress_website',
    'field_pog_cooper_with_other',
    'field_pog_website_needs',
    'field_pog_cooper_with',
    'field_pog_learning_whatdoc_sonst',
    'field_pog_meeting_alle',
    'field_pog_table4'
  ]
));

/**
 * Load helper functions.
 */
module_load_include('inc', 'pog_multistep', 'pog_multistep.func');

/**
 * Implements hook_theme().
 */
function pog_multistep_theme($existing, $type, $theme, $path) {
  return [
    'pog_document' => [
      'template' => 'pog_document',
      'path' => $path . '/templates',
      'variables' => [
        'node' => NULL,
        'context' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pog_multistep_form_entity_form_mode_add_form_alter(&$form, FormStateInterface $form_state) {
  _pog_multistep_entity_form_mode_form_alter($form, $form_state);
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pog_multistep_form_entity_form_mode_edit_form_alter(&$form, FormStateInterface $form_state) {
  _pog_multistep_entity_form_mode_form_alter($form, $form_state);
}

function pog_multistep_entity_form_mode_builder($entity_type, EntityFormMode $mode, &$form, FormStateInterface $form_state) {
  // Save data to entity's third party settings.
  $tab_index = (int) $form_state->getValue('pog_multistep_tab_index', 0);
  $mode->setThirdPartySetting('pog_multistep', 'tab_index', $tab_index);
}

/**
 * Implements hook_form_BASE_FORM_ID_alter().
 */
function pog_multistep_form_node_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  /** @var \Drupal\node\NodeForm $form_obj */
  $form_obj = $form_state->getFormObject();
  $node = $form_obj->getEntity();

  if ($node->bundle() === 'pog' && $form_state->getStorage()['form_display']->get('mode') != 'default') {
    $form['#attached']['library'][] = 'pog_multistep/group_visible';

    // Hide revision fields.
    $form['revision_information']['#access'] = FALSE;

    // Attach 'Back' button.
    $cur_op = $form_obj->getOperation();
    $prev_op = _pog_multistep_get_prev_op($cur_op);

    if ($prev_op !== NULL) {
      $url = Url::fromRoute('pog_multistep.multistep_node_controller_add', [
        'entity_form_mode' => $prev_op,
      ]);

      $form['actions']['back'] = [
        '#type' => 'link',
        '#title' => t('Back'),
        '#url' => $url,
      ];
    }


    // Step 4 custom changes
    switch ($cur_op) {
      case POG_MULTISTEP_FORM_STEP_1 :
        _pog_multistep_form_step_1_alter($form, $form_state);
        $form['#attached']['library'][] = 'pog_multistep/percents';
        break;
      case POG_MULTISTEP_FORM_STEP_3 :
        _pog_multistep_form_step_3_alter($form, $form_state);
        break;
      case POG_MULTISTEP_FORM_STEP_4 :
        _pog_multistep_form_step_4_alter($form, $form_state);
        break;
      case POG_MULTISTEP_FORM_STEP_5 :
        _pog_multistep_form_step_5_alter($form, $form_state);
        break;
      case POG_MULTISTEP_FORM_STEP_6 :
        _pog_multistep_form_step_6_alter($form, $form_state);
        break;
      case POG_MULTISTEP_FORM_STEP_7 :
        _pog_multistep_form_step_7_alter($form, $form_state);
        break;
    }

    if (isset($form['actions']['submit'])) {
      $form['actions']['submit']['#submit'][] = 'pog_multistep_node_form_submit';
      $form['actions']['submit_next'] = $form['actions']['submit'];
      $form['actions']['submit_next']['#value'] = t('Save and continue');
    }

    // Add custom css.
    $form['#attached']['library'][] = 'pog_multistep/default';

    // Attach datepicker library.
    $form['#attached']['library'][] = 'pog/datepicker';
    $form['#attached']['library'][] = 'pog_multistep/conditions';
    $form['#attached']['library'][] = 'core/drupal.dialog.ajax';

    // Disable_html5_validation
    $form['#attributes']['novalidate'] = 'novalidate';

    // Attach custom validation.
    $form['#validate'][] = 'pog_multistep_node_form_validate';
  }
}

/**
 * Redirects to next tab if it exists.
 */
function pog_multistep_node_form_submit($form, FormStateInterface $form_state) {
  /** @var \Drupal\node\NodeForm $form_obj */
  $form_obj = $form_state->getFormObject();
  $node = $form_obj->getEntity();
  $cur_op = $form_obj->getOperation();
  $next_op = _pog_multistep_get_next_op($cur_op);
  $triggered = $form_state->getTriggeringElement();

  // Set redirect on current page if SAve button was clicked.
  if (!$next_op && $triggered['#id'] == 'edit-submit'){
    $next_op = $cur_op;
  }

  // Set form redirection if next_op exists.
  if ($next_op) {
      $entity_form_mode = $triggered['#id'] == 'edit-submit-next' ? $next_op : $cur_op;
      $form_state->setRedirect('pog_multistep.multistep_node_controller_add', [
        'entity_form_mode' => $entity_form_mode,
      ]);
  }
  // Check redirect on POG view page.
  if (!$next_op && $triggered['#id'] == 'edit-submit-next') {
    // Force redirect on not finished tab if it exists.
    if ($not_validated_tab = _pog_multistep_get_user_not_validated_tab()) {
      $form_state->setRedirect('pog_multistep.multistep_node_controller_add', [
        'entity_form_mode' => $not_validated_tab
      ]);
    }
    else {
      $node->isComplete = TRUE;
      $node->save();
      $form_state->setRedirect('pog_multistep.multistep_node_controller_redirect');
    }
  }

  // Update POG tab status
  _pog_multistep_set_tab_status($cur_op, POG_MULTISTEP_TAB_VALIDATED, $node);
  // Update all next tabs if we change previous tab.
  _pog_multistep_update_next_tabs_statuses($cur_op, $node);


    // Clear node save message.
  _pog_multistep_hide_node_messages($node);
}

/**
 * Custom validation for node pog form.
 */
function pog_multistep_node_form_validate(&$form, FormStateInterface $form_state) {

  // Not required fields which should checking as required.
  $required_check_fields = unserialize(POG_MULTISTEP_REQUIRED_FIELDS);
  $skip_errors_fields = $required_errors_fields = [];
  $children = _pog_multistep_get_form_children($form);
  // Remove hidden fields from children array.
  foreach ($children as $field_name) {
    if (isset($form['#conditional_fields'][$field_name]['dependees'])) {
      $triggered = _pog_multistep_dependee_field_triggered($field_name, $form, $form_state);

      $is_empty = _pog_is_empty($field_name, $form_state->getValue($field_name));
      $is_required = isset($form[$field_name]['#required']) && $form[$field_name]['#required'];
      $is_required = !$is_required && isset($form[$field_name]['widget']['#required']) ? $form[$field_name]['widget']['#required'] : $is_required;

      if (!$triggered) {
        unset($children[$field_name]);
        // Skip error.
        if ($is_required && $is_empty) {
          $skip_errors_fields[] = $field_name . '][0][value';
          $skip_errors_fields[] = $field_name . '][0][target_id';
        }
      }
      else {
        // Required error need to show.
        if ($is_empty && in_array($field_name, $required_check_fields)) {
          $required_errors_fields[] = $field_name;
        }
      }
    }
  }

  // Search triggered fields with hidden controlled field.
  $is_not_triggered = [];
  reset($children);
  foreach ($children as $field_name) {
    if (isset($form['#conditional_fields'][$field_name]['dependees'])) {
      $triggered = _pog_multistep_dependee_field_triggered($field_name, $form, $form_state);
      if ($triggered) {
        $controlled_fields = _pog_multistep_controlled_fields($field_name, $form);
        $is_visible = array_intersect($children, $controlled_fields);
        if (empty($is_visible)) {
          $is_not_triggered[] = $field_name;
        }
      }
    }
  }

  // Check empty field group fields.
  foreach ($form['#fieldgroups'] as $group) {
    if ($group->format_settings['required_fields'] && $form[$group->group_name]['#access']) {
      // Check group children fields.
      $is_group_empty = TRUE;
      $group_empty_fields = [];
      foreach ($group->children as $child_field_name) {
        if ($group->region != 'hidden') {
          if (isset($children[$child_field_name])) {
            if (!_pog_is_empty($child_field_name, $form_state->getValue($child_field_name))) {
              $is_group_empty = FALSE;
              break;
            }
            else {
              $group_empty_fields[] = $child_field_name;
            }
          }
        }
      }

      // Set error for empty group fields.
      if ($is_group_empty && !empty($group_empty_fields)) {
        $group->format_settings['classes'] .= ' has-empty-fields';
        $form_state->setErrorByName($group->group_name, t('Require fill any field in group @group".', ['@group' => $group->label]));
      }

    }
  }

  // Clear validation errors for skipped fields.
  if (!empty($skip_errors_fields)) {
    $errors = $form_state->getErrors();
    $form_state->clearErrors();
    foreach ($errors as $field_error_name => $error) {
      if (!in_array($field_error_name, $skip_errors_fields)) {
        $message = strip_tags($error->__toString());
        $form_state->setErrorByName($field_error_name, $message);
      }
    }
  }


  // Show errors which conditional fields module will remove later.
  $conditional_field_remove_errors = ['field_pog_encoder_leben', 'field_pog_encoder_sach', 'field_pog_encoder_kraken'];
  foreach ($form_state->getErrors() as $key => $error) {
    $field_name = substr($key, 0, strpos($key, ']'));
    if (in_array($field_name, $conditional_field_remove_errors)) {
      _pog_multistep_field_set_error($form, $form_state, $field_name);
    }
  }

  foreach ($required_errors_fields as $field_name) {
    _pog_multistep_field_set_error($form, $form_state, $field_name);
  }

  // Set current status.
  _pog_multistep_set_tab_status($form_state->getFormObject()->getOperation(), POG_MULTISTEP_TAB_CHANGED);
}

/**
 * Implements hook_ENTITY_TYPE_presave().
 */
function pog_multistep_node_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if ($entity->bundle() == 'pog') {
    if (isset($entity->isComplete)) {

        $entity->body->format = 'full_html';
        $entity->body->summary = '';

        // Render pog_document file template.
        $html_template = pog_multistep_get_template($entity);
        // Render tokens in html.
        $html = \Drupal::token()->replace($html_template, ['node' => $entity]);
        // Save result html in node body.
        $entity->body->value = $html;

        // Set node is not changed.
        $entity->set('field_date_html_generation', date(DATETIME_DATETIME_STORAGE_FORMAT, REQUEST_TIME));
        unset($entity->isComplete);
    }
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function pog_multistep_form_config_pages_pog_multistep_form_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  $form['field_result_template']['token_tree'] = array(
    '#theme' => 'token_tree_link',
    '#token_types' => array('user', 'node'),
    '#show_restricted' => TRUE,
    '#global_types' => FALSE,
    '#weight' => 90,
  );
  $form['actions']['submit']['#submit'][] = 'pog_multistep_form_config_pages_pog_multistep_form_submit';
}

/**
 * Save changes from config in pog document twig template.
 */
function pog_multistep_form_config_pages_pog_multistep_form_submit($form, FormStateInterface $form_state) {
  $entity = $form_state->getFormObject()->getEntity();
  $html = $entity->get('field_result_template')->value;
  // Save html to file template.
  $theme = \Drupal::config('system.theme')->get('default');
  $path = DRUPAL_ROOT . '/' . drupal_get_path('theme', $theme) . '/templates/pog_multistep';
  // Prepare file destination folder.
  file_prepare_directory($path, FILE_CREATE_DIRECTORY | FILE_MODIFY_PERMISSIONS);
  // Save file.
  file_unmanaged_save_data($html, $path . '/pog_document.html.twig', FILE_EXISTS_REPLACE);
  // Chmod file.
  \Drupal::service('file_system')->chmod($path . '/pog_document.html.twig', 0777);
}


/**
 * Implements hook_preprocess_node().
 */
function pog_multistep_preprocess_node(&$variables) {
  $node = $variables['node'];
  switch ($node->getType()) {
    case 'pog':
      if ($variables['view_mode'] == 'full' && !$node->get('field_date_html_generation')->isEmpty()) {
        $date = strtotime($node->get('field_date_html_generation')->value);
        if ($date <= $node->get('changed')->value) {
          $form = \Drupal::formBuilder()->getForm('Drupal\pog_multistep\Form\MultistepResetForm', $node->nid);
          $variables['node_message'] = \Drupal::service('renderer')->render($form);
        }

        $links = [];
        $print_link = $variables['content']['entity_print_view_pdf'];
        if (isset($variables['content']['entity_print_view_pdf'])) {
          $variables['content']['entity_print_view_pdf']['#attributes']['download'] = 'download';
          $print_link['#attributes']['download'] = FALSE;
          $print_link['#attributes']['class'] = ['print-link'];
          $print_link['#title'] = t('Print');
          $links[] = \Drupal::service('renderer')->render($variables['content']['entity_print_view_pdf']);
          $links[] = \Drupal::service('renderer')->render($print_link);
        }

        $variables['pog_right_links'] = [
          '#theme' => 'item_list',
          '#list_type' => 'ul',
          '#items' => $links,
          '#attributes' => ['class' => ['pog-right-links']]
        ];

        // Add custom quickedit js.
        if (isset($variables['attributes']['data-quickedit-entity-id'])) {
          $variables['#attached']['library'][] = 'pog_multistep/quickedit';
          $variables['#attached']['library'][] = 'pog_multistep/backbone';
          $variables['#attached']['drupalSettings']['pog_multistep'] = [
            'nid' => $node->id()
          ];
        }
      }
      break;
  }
}

/**
 * Implements hook_entity_view().
 */
function pog_multistep_entity_view(array &$build, \Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display, $view_mode) {
  if ($entity->bundle() == 'pog' && $view_mode == 'full') {
    $build['#cache']['max-age'] = 0;
    // For disabling init quickedit editor of title field.
    $build['title']['#view_mode'] = '_custom';
  }
}

/**
 * Implements hook_preprocess_menu().
 *
 */
function pog_multistep_preprocess_menu(&$variables) {
  $current_path = \Drupal::service('path.current')->getPath();

  if (isset($variables['menu_name']) && $variables['menu_name'] == 'pog-multistep-steps') {
    if ($node = pog_multistep_get_current_node()) {

      $tabs_statuses = _pog_multistep_get_tabs_statuses();
      foreach ($variables['items'] as $tab_key => $item) {
        $item_tab_key = str_replace('pog_multistep.step_link:', '', $tab_key);

        if ($tab_key == 'pog_multistep.step_link:pog') {
          continue;
        }

        if (isset($tabs_statuses[$item_tab_key])) {
          $variables['items'][$tab_key]['isTabStatus'] = 'tab-status-' . $tabs_statuses[$item_tab_key];
        }
        else {
          $variables['items'][$tab_key]['url']->setOption('inactive', TRUE);
        }

        // Set active class for current menu item.
        if ($current_path == '/pog/' . $item_tab_key) {
          $variables['items'][$tab_key]['in_active_trail'] = TRUE;
        }
      }

      // If POG view tab exists.
      if (isset($variables['items']['pog_multistep.step_link:pog'])) {
        $tab_last = &$variables['items']['pog_multistep.step_link:pog'];
        //if (!$node->get('field_date_html_generation')->isEmpty()){
        // If pog view item is existing in menu.
        $tab_last['is_pog_accepted'] = !empty($node->field_pog_accepted->value);
        $tab_last['isEnable'] = TRUE;
        // If we it`s pog view page set last item as active.
        if (\Drupal::service('path.current')
            ->getPath() == '/node/' . $node->id()) {
          $tab_last['in_active_trail'] = TRUE;
        }
        // If POG not accepted? then shw accept link.
        if (!$node->field_pog_accepted->value) {
          $tab_last['url'] = Url::fromUserInput('/pog/accept');
        }
        //  }
      }
    }
    else {
      foreach ($variables['items'] as $tab_key => $value) {
        $variables['items'][$tab_key]['url']->setOption('inactive', TRUE);
      }
    }
  }
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function pog_multistep_preprocess_block(&$vars) {
  if ($vars['derivative_plugin_id'] == 'pog-multistep-steps') {
    $vars['#cache']['max-age'] = 0;
    $vars['elements']['#cache']['max-age'] = 0;
  }
}

/**
 * Implements hook_preprocess_page().
 */
function pog_multistep_preprocess_page(&$variables) {
  if (isset($variables['node']) && $node = $variables['node']) {
    $node = is_object($node) ? $node : \Drupal\node\Entity\Node::load($node);
    if ($node->bundle() == 'pog') {
      $form = \Drupal::formBuilder()->getForm('Drupal\pog_multistep\Form\MultistepResetForm', $node->nid);
      $variables['pog_multistep_reset_button'] = \Drupal::service('renderer')->render($form);
    }
  }
}

/**
 * Implements hook_entity_prepare_form().
 */
function pog_multistep_entity_prepare_form(\Drupal\Core\Entity\EntityInterface $entity, $operation, \Drupal\Core\Form\FormStateInterface $form_state) {
  if ($operation == 'distribution_market' && $entity->getType() == 'pog') {
    $field_names = ['field_pog_table_lv', 'field_pog_table_kranken', 'field_pog_table_sach'];
    foreach ($field_names as $field_name) {
      $exist_value = $entity->get($field_name)->getValue();

      $add_nums = 3 - count($exist_value);

      if (!$add_nums) {
        continue;
      }

      $entity_manager = \Drupal::entityTypeManager();
      $langcode = $form_state->get('langcode');

      $field = $entity->get($field_name);
      $target_type = 'paragraph';

      $entity_type = $entity_manager->getDefinition($target_type);
      $bundle_key = $entity_type->getKey('bundle');

      while ($add_nums > 0) {
        $paragraphs_entity = $entity_manager->getStorage($target_type)->create(array(
          $bundle_key => 'pog_table_3_8_',
          'langcode' => $langcode,
        ));

        $field->appendItem($paragraphs_entity);
        $add_nums--;
      }
    }
  }
}